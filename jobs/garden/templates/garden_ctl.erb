#!/bin/bash -e

set -x

RUN_DIR=/var/vcap/sys/run/garden
LOG_DIR=/var/vcap/sys/log/garden
PIDFILE=$RUN_DIR/garden.pid
DATA_DIR=/var/vcap/data/garden

<% if_p('garden.http_proxy') do |http_proxy| %>
	export HTTP_PROXY=<%= http_proxy %>
	export http_proxy=<%= http_proxy %>
<% end %>
<% if_p('garden.https_proxy') do |https_proxy| %>
	export HTTPS_PROXY=<%= https_proxy %>
	export https_proxy=<%= https_proxy %>
<% end %>
<% if_p('garden.no_proxy') do |no_proxy| %>
	export NO_PROXY=<%= no_proxy %>
	export no_proxy=<%= no_proxy %>
<% end %>

function setup() {
  mkdir -p /var/vcap/sys/log/monit
  exec 1>> /var/vcap/sys/log/monit/garden.log
  exec 2>> /var/vcap/sys/log/monit/garden.log
}

# copied from https://github.com/concourse/concourse/blob/master/jobs/baggageclaim/templates/baggageclaim_ctl.erb#L54
# break out of bosh-lite device limitations
function permit_device_control() {
  local devices_mount_info=$(cat /proc/self/cgroup | grep devices)

  if [ -z "$devices_mount_info" ]; then
    # cgroups not set up; must not be in a container
    return
  fi

  local devices_subsytems=$(echo $devices_mount_info | cut -d: -f2)
  local devices_subdir=$(echo $devices_mount_info | cut -d: -f3)

  if [ "$devices_subdir" = "/" ]; then
    # we're in the root devices cgroup; must not be in a container
    return
  fi

  cgroup_dir=${RUN_DIR}/devices-cgroup

  if [ ! -e ${cgroup_dir} ]; then
    # mount our container's devices subsystem somewhere
    mkdir ${cgroup_dir}
  fi

  if ! mountpoint -q ${cgroup_dir}; then
    mount -t cgroup -o $devices_subsytems none ${cgroup_dir}
  fi

  # permit our cgroup to do everything with all devices
  echo a > ${cgroup_dir}${devices_subdir}/devices.allow
}

function backing_store_size() {
  local configured=1
  local configured_store_size_k=0
  if [[ -1 = $1 ]]; then
    configured=0
  else
    configured_store_size_k=$(($1*1024))
  fi

  local backing_store_path=$2
  local df_output=$($3 $2)
  local available_size_k=$(echo "$df_output" | awk '{ print $4 }' | tail -n 1)

  if [[ 0 = $configured || ($available_size_k -lt $configured_store_size_k) ]]; then
    echo "$available_size_k"K
  else
    echo "$configured_store_size_k"K
  fi
}

case $1 in

  start)
    setup
    if [ -f "$PIDFILE" ]; then
      pid=$(head -1 "$PIDFILE")

      if [ -n "$pid" ] && [ -e /proc/$pid ]; then
        echo "Garden is already running (pid: $pid); aborting."
        exit 1
      fi

      echo "Removing stale pidfile..."
      rm "$PIDFILE"
    fi

    mkdir -p $RUN_DIR
    mkdir -p $DATA_DIR
    mkdir -p $LOG_DIR

    export PATH=/var/vcap/packages/shadow/sbin:$PATH
    export PATH=/var/vcap/packages/iptables/sbin:$PATH
    export PATH=/var/vcap/packages/btrfs-progs/bin:$PATH

    mkdir -p /var/vcap/data/garden/depot

    <% if p("garden.destroy_containers_on_start") %>
    snapshots_path=""
    <% else %>
    snapshots_path=/var/vcap/data/garden/snapshots
    <% end %>
    graph_path=/var/vcap/data/garden/btrfs_graph

    <% if p("garden.mount_btrfs_loopback") %>
    mountpoint -q /sys || mount -t sysfs sysfs /sys
    backing_store=/var/vcap/data/garden/garden_graph_backing_store
    mount_point=$graph_path

    if [ ! -f $backing_store ]
    then
      permit_device_control
      for i in $(seq 0 64); do
        if ! mknod -m 0660 /dev/loop$i b 7 $i; then
          break
        fi
      done

      echo "no backing store found at ${backing_store}: creating"
      touch $backing_store
      truncate -s $(backing_store_size <%= p('garden.btrfs_store_size_mb')%> "/var/vcap/data" "df -k") $backing_store

      loopback_device=$(losetup -f --show $backing_store)
      mkfs.btrfs --nodiscard $backing_store
    else
      echo "backing store already exists, skipping creation"
    fi

    if cat /proc/mounts | grep $mount_point
    then
      echo "btrfs already mounted at $mount_point"
    else
      loopback_device="$(losetup -j $backing_store | cut -d':' -f1)"
      if [ -z $loopback_device ]; then
       loopback_device=$(losetup -f --show $backing_store)
      fi

      echo "mounting btrfs volume"
      mkdir -p $mount_point
      mount -t btrfs $loopback_device $mount_point
    fi
    <% end %>

    mkdir -p $graph_path
    chmod go-rx $graph_path

    ulimit -n 65536

    echo $$ > $PIDFILE

    exec /var/vcap/packages/garden-linux/bin/garden-linux \
      -depot=/var/vcap/data/garden/depot \
      -snapshots="${snapshots_path}" \
      -graph=$graph_path \
      -bin=/var/vcap/packages/garden-linux/src/github.com/cloudfoundry-incubator/garden-linux/linux_backend/bin \
      -mtu=<%= p("garden.network_mtu") %> \
      -disableQuotas=<%= !p("garden.disk_quota_enabled") %> \
      -listenNetwork=<%= p("garden.listen_network") %> \
      -listenAddr=<%= p("garden.listen_address") %> \
      -denyNetworks=<%= p("garden.deny_networks").join(",") %> \
      -allowNetworks=<%= p("garden.allow_networks").join(",") %> \
      -allowHostAccess=<%= p("garden.allow_host_access") %> \
      -networkPool=<%= p("garden.network_pool") %> \
      -debugAddr=<%= p("garden.debug_listen_address") %> \
      -rootfs=<%= p("garden.default_container_rootfs") %> \
      -containerGraceTime=<%= p("garden.default_container_grace_time") %> \
      -enableGraphCleanup=<%= p("garden.enable_graph_cleanup") %> \
    <% if_p("garden.docker_registry_endpoint") do |endpoint| %> \
      -registry=<%= endpoint %> \
    <% end %> \
    <% if_p("garden.dropsonde.origin") do |origin| %> \
      -dropsondeOrigin=<%= origin %> \
    <% end %> \
    <% if_p("garden.dropsonde.destination") do |destination| %> \
      -dropsondeDestination=<%= destination %> \
    <% end %> \
    <% if_p("garden.tag") do |tag| %> \
      -tag=<%= tag %> \
    <% end %> \
    <% if_p("garden.port_pool.start") do |start| %> \
      -portPoolStart=<%= start %> \
    <% end %> \
    <% if_p("garden.port_pool.size") do |size| %> \
      -portPoolSize=<%= size %> \
    <% end %> \
    <% if_p("garden.insecure_docker_registry_list") do |list| %> \
      -insecureDockerRegistryList=<%= list.join(',') %> \
    <% end %> \
    <% if_p("garden.persistent_image_list") do |list| %> \
      -persistentImageList=<%= list.join(',') %> \
    <% end %> \
      1>>$LOG_DIR/garden.stdout.log \
      2>>$LOG_DIR/garden.stderr.log

    ;;

  stop)
    setup
    pid=$(cat $PIDFILE)

    for i in $(seq 30); do
      echo "sending TERM to ${pid}..."
      if kill $pid; then
        sleep 1
      else
        echo "exited"
        exit 0
      fi
    done

    echo "timed out; sending SIGQUIT followed by SIGKILL to ${pid}..."
    if kill -QUIT $pid; then
      sleep 5

      echo "killing ${pid}..."
      kill -9 $pid
    fi

    echo "killed"

    ;;

  *)
    echo "Usage: $0 {start|stop}"

    ;;

esac
